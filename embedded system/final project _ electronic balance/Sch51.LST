C51 COMPILER V9.52.0.0   SCH51                                                             11/24/2015 20:06:24 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE SCH51
OBJECT MODULE PLACED IN Sch51.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE Sch51.c BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          
   2          #include "Main.h"
   3          #include "Port.h"
   4          #include "Sch51.h"
   5          
   6          // ------ Public variable definitions ------------------------------
   7          
   8          // The array of tasks
   9          sTask SCH_tasks_G[SCH_MAX_TASKS];
  10          
  11          tByte Error_code_G = 0;
  12          
  13          // ------ Private function prototypes ------------------------------
  14          
  15          static void SCH_Go_To_Sleep(void);
  16          
  17          // ------ Private variables ----------------------------------------
  18          
  19          // Keeps track of time since last error was recorded (see below)
  20          static tWord Error_tick_count_G;
  21          
  22          // The code of the last error (reset after ~1 minute)
  23          static tByte Last_error_code_G;
  24          
  25          
  26          /*------------------------------------------------------------------*-
  27          
  28          -*------------------------------------------------------------------*/
  29          void SCH_Dispatch_Tasks(void) 
  30             {
  31   1         tByte Index;
  32   1      
  33   1         // Dispatches (runs) the next task (if one is ready)
  34   1         for (Index = 0; Index < SCH_MAX_TASKS; Index++)
  35   1            {
  36   2            if (SCH_tasks_G[Index].RunMe > 0) 
  37   2               {
  38   3               (*SCH_tasks_G[Index].pTask)();  // Run the task
  39   3      
  40   3               SCH_tasks_G[Index].RunMe -= 1;   // Reset / reduce RunMe flag
  41   3      
  42   3               // Periodic tasks will automatically run again
  43   3               // - if this is a 'one shot' task, remove it from the array
  44   3               if (SCH_tasks_G[Index].Period == 0)
  45   3                  {
  46   4                  SCH_Delete_Task(Index);
  47   4                  }
  48   3               }
  49   2            }
  50   1      
  51   1         // Report system status
  52   1         SCH_Report_Status();  
  53   1      
  54   1         // The scheduler enters idle mode at this point 
  55   1         SCH_Go_To_Sleep();          
C51 COMPILER V9.52.0.0   SCH51                                                             11/24/2015 20:06:24 PAGE 2   

  56   1         }
  57          
  58          /*------------------------------------------------------------------*-
  59          
  60          -*------------------------------------------------------------------*/
  61          tByte SCH_Add_Task(void (code * pFunction)(), 
  62                             const tWord DELAY, 
  63                             const tWord PERIOD)    
  64             {
  65   1         tByte Index = 0;
  66   1         
  67   1         // First find a gap in the array (if there is one)
  68   1         while ((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
  69   1            {
  70   2            Index++;
  71   2            } 
  72   1         
  73   1         // Have we reached the end of the list?   
  74   1         if (Index == SCH_MAX_TASKS)
  75   1            {
  76   2            // Task list is full
  77   2            //
  78   2            // Set the global error variable
  79   2            Error_code_G = ERROR_SCH_TOO_MANY_TASKS;
  80   2      
  81   2            // Also return an error code
  82   2            return SCH_MAX_TASKS;  
  83   2            }
  84   1            
  85   1         // If we're here, there is a space in the task array
  86   1         SCH_tasks_G[Index].pTask  = pFunction;
  87   1           
  88   1         SCH_tasks_G[Index].Delay  = DELAY;
  89   1         SCH_tasks_G[Index].Period = PERIOD;
  90   1      
  91   1         SCH_tasks_G[Index].RunMe  = 0;
  92   1      
  93   1         return Index; // return position of task (to allow later deletion)
  94   1         }
  95          /*------------------------------------------------------------------*-
  96          -*------------------------------------------------------------------*/
  97          bit SCH_Delete_Task(const tByte TASK_INDEX) 
  98             {
  99   1         bit Return_code;
 100   1      
 101   1         if (SCH_tasks_G[TASK_INDEX].pTask == 0)
 102   1            {
 103   2            // No task at this location...
 104   2            //
 105   2            // Set the global error variable
 106   2            Error_code_G = ERROR_SCH_CANNOT_DELETE_TASK;
 107   2      
 108   2            // ...also return an error code
 109   2            Return_code = RETURN_ERROR;
 110   2            }
 111   1         else
 112   1            {
 113   2            Return_code = RETURN_NORMAL;
 114   2            }      
 115   1         
 116   1         SCH_tasks_G[TASK_INDEX].pTask   = 0x0000;
 117   1         SCH_tasks_G[TASK_INDEX].Delay   = 0;
C51 COMPILER V9.52.0.0   SCH51                                                             11/24/2015 20:06:24 PAGE 3   

 118   1         SCH_tasks_G[TASK_INDEX].Period  = 0;
 119   1      
 120   1         SCH_tasks_G[TASK_INDEX].RunMe   = 0;
 121   1      
 122   1         return Return_code;       // return status
 123   1         }
 124          
 125          /*------------------------------------------------------------------*-
 126          -*------------------------------------------------------------------*/
 127          void SCH_Report_Status(void)
 128             {
 129   1      #ifdef SCH_REPORT_ERRORS
 130   1         // ONLY APPLIES IF WE ARE REPORTING ERRORS
 131   1         // Check for a new error code
 132   1         if (Error_code_G != Last_error_code_G)
 133   1            {
 134   2            // Negative logic on LEDs assumed
 135   2            Error_port = 255 - Error_code_G;
 136   2            
 137   2            Last_error_code_G = Error_code_G;
 138   2      
 139   2            if (Error_code_G != 0)
 140   2               {
 141   3               Error_tick_count_G = 60000;
 142   3               }
 143   2            else
 144   2               {
 145   3               Error_tick_count_G = 0;
 146   3               }
 147   2            }
 148   1         else
 149   1            {
 150   2            if (Error_tick_count_G != 0)
 151   2               {
 152   3               if (--Error_tick_count_G == 0)
 153   3                  {
 154   4                  Error_code_G = 0; // Reset error code
 155   4                  }
 156   3               }
 157   2            }
 158   1      #endif
 159   1         }
 160          
 161          /*------------------------------------------------------------------*-
 162          -*------------------------------------------------------------------*/
 163          void SCH_Go_To_Sleep()
 164             {
 165   1         PCON |= 0x01;    // Enter idle mode (generic 8051 version)
 166   1      
 167   1         // Entering idle mode requires TWO consecutive instructions 
 168   1         // on 80c515 / 80c505 - to avoid accidental triggering
 169   1         //PCON |= 0x01;    // Enter idle mode (#1)
 170   1         //PCON |= 0x20;    // Enter idle mode (#2)
 171   1         }
 172          
 173          /*------------------------------------------------------------------*-
 174            ---- END OF FILE -------------------------------------------------
 175          -*------------------------------------------------------------------*/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    306    ----
C51 COMPILER V9.52.0.0   SCH51                                                             11/24/2015 20:06:24 PAGE 4   

   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     25       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
